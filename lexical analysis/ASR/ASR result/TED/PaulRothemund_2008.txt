 and computer programs that could help convince you. But one to me that's most compelling is a peculiar sensitivity to small changes that can make large changes in biological development. The output, a small mutation can take a two-winged fly and make it a four-winged fly. Or it could take a fly and put legs where it's antennae should be. Or if you're familiar with the Princess Bride, it can create a six-fingered man. Now a hallmark of computer programs is just as kind of sensitivity to small changes. If your bank accounts $1 and you flip a single bit, you can end up with $1,000. So these small changes are things that I think that the indicators of a complicated computation in development is underlying this amplified large changes. So now all of this indicates that there are molecular programs underlying biology. And it shows the power of molecular programs, biology does. And what I want to do is write molecular programs potentially to build technology. And there are a lot of people doing this, a lot of syntheticologists doing this, like Craig Venter, and they concentrate on using cells. They're cell-oriented. So my friends, molecular programmers and I have a sort of biomolecule centric approach. We're interested in using DNA, RNA, and protein and building new languages for building things from the bottom up, using biomolecules and potentially having nothing to do with biology. So these are all the machines in a cell. There's a camera, there's the solar panels of the cell, some switches that turn your genes on and off, the girders of the cell, motors that move your muscles. My little group of molecular programmers are trying to refashion all of these parts from DNA. We're not DNA zealots, but DNA is the cheapest, easiest to understand and easy to program, material to do this, and as other things become easier to use, maybe protein will work without. If you succeed, what will molecular programming look like? You're going to sit in front of your computer, you're going to design something like a cell phone, and in a high-level language you'll describe that cell phone. Then you're going to have a compiler. You're going to take that description, and it's going to turn it into actual molecules that can be sent to a synthesizer, and that synthesizer will pack those molecules into a seed. What happens if you water and feed that seed appropriately, is it will do a developmental computation, a molecular computation, and it will build an electronic computer. If I haven't revealed my prejudices already, I think that life has been about molecular computers, building electrochemical computers, building electronic computers, which together with electrochemical computers will build new molecular computers, which will build new electronic computers, and so forth. If you buy all of this, and you think life is about computation as I do, then you look at big questions through the eyes of the computer scientist. One big question is, how does baby know when to stop growing? For molecular programming, the question is, how does your cell phone know when to stop growing? Or how does a computer program know when to stop running? Or more to the point, how do you know if a program will ever stop? There are other questions like this, too. One of them is Craig Venter's question. Turns out I think he's actually a computer scientist. He asks, how big is the minimal genome that will give me a functioning microorganism? How few genes can I use? This is exactly what I'm going to do.